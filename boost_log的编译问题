[root@localhost src]# g++ -g -std=c++11 -Wall -DBOOST_LOG_DYN_LINK -o logtest.o -c boost_log_test.cp
[root@localhost src]# g++ -g -std=c++11 logtest.o -o logtest -rdynamic -lpthread -lboost_log -lboost_system -lboost_thread -lboost_filesystem

[root@localhost src]# ls
boost_log_test.cpp  CMakeLists.txt  hello.cpp  logtest  logtest.o  main.cpp

[root@localhost src]# ./logtest 
./logtest: error while loading shared libraries: libboost_log.so.1.57.0: cannot open shared object f No such file or directory


解决方法:
[root@localhost src]# echo $LD_LIBRARY_PATH

[root@localhost src]# LD_LIBRARY_PATH=/usr/local/lib
[root@localhost src]# echo $LD_LIBRARY_PATH
/usr/local/lib
[root@localhost src]# export LD_LIBRARY_PATH
[root@localhost src]# ./logtest 
hello world.
[2017-09-06 19:34:04.099477] [0x000007f132766374] [trace]   a trace severity message.



cmake_minimum_required(VERSION 2.6)
project(Hello)

# 设置编译器（gcc/g++）
set(CMAKE_CXX_COMPILER "g++")

#设置Debug/Release
set(CMAKE_BUILD_TYPE "Debug")

# 设置编译选项
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -pthread -g -Wall")
add_definitions(-DBOOST_LOG_DYN_LINK)

# 设置可执行二进制文件的目录
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)

# 设置存放编译出来的库文件的目录
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
# 并把该目录设置为链接目录
link_directories(${PROJECT_SOURCE_DIR}/lib)
link_directories(/usr/local/lib)


# 设定头文件目录
include_directories(${PROJECT_SOURCE_DIR}/include)

# 增加子文件夹（src路径是通过子文件夹形式添加）
add_subdirectory(${PROJECT_SOURCE_DIR}/src)








# 编译静态链接库libhello.a
add_library(hello hello.cpp)

# 编译可执行文件和设置链接库（注意顺序）
add_executable(main main.cpp)
target_link_libraries(main hello)

add_executable(boost_log_test boost_log_test.cpp)
target_link_libraries(boost_log_test boost_log_setup boost_log)
